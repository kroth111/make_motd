#!/bin/bash
#
# Print out info about this system
#
# v0.1 sfennell
# v1.0 kroth
#
# @(#)$Id: v1.0$

OS=`uname`
docker=`cat /proc/1/cgroup |& grep -ci docker`

# configure grep options
if [ "Linux" == $OS ]; then
   GREPOPTS="-i --color "
   GREPONCE="-m 1 "
   alpine=`cat /etc/issue  | grep -ic alpine`
   if [[ $alpine > 0 ]]; then
      OS="Alpine"
      GREPOPTS="-i "
   elif [[ $docker > 0 ]]; then
         GREPOPTS="-i "
   fi
else
   GREPOPTS="-i "
   GREPONCE=" "
fi

if [ -e /usr/local/bin/colorout.pl ]; then
   colorout=/usr/local/bin/colorout.pl
elif [ -e ~/tools/colorout.pl ]; then
   colorout=~/tools/colorout.pl
elif [ -e ~/bin/colorout.pl ]; then
   colorout=~/bin/colorout.pl
else
   colorout="grep $GREPOPTS . # "
fi

# print out custom header for this machine
if [ -e ~/etc/motd ]; then
   if [[ $OS =~ ^CYGWIN* ]]; then
        files=(~/etc/*)
        cat `printf "%s\n" "${files[RANDOM % ${#files[@]}]}"`
   elif [ -n "$COMSPEC" -a -x "$COMSPEC" ]; then 
      echo $0: this script does not support Windows \:\(
      exit
   else
     # works with Redhat Enterprise 5+ and Solaris
     files=(~/etc/*)
     cat `printf "%s\n" "${files[RANDOM % ${#files[@]}]}"` | eval "$colorout : red - blue o green = magenta _ yellow , cyan '#' blue"
  fi
fi

echo ""
echo "======================================================================"

if [ "Linux" == $OS ]; then
   pkglist="echo error: "
   if [ -e /usr/bin/rpm ]; then
        pkglist="rpm -qa "
   fi
   if [ -e /usr/bin/dpkg ]; then 
        pkglist="dpkg -l "
   fi
fi

# print out OS type
uname -a | eval "$colorout linux green alpine green cygwin green sunos red unix blue gnu blue sco red aix red ming yellow"

# print out OS name/version
if [[ $OS =~ ^CYGWIN* ]]; then
     echo
else
  cmd="cat /etc/*release /etc/*release/* |& egrep $GREPONCE $GREPOPTS 'linux|alpine|sunos|unix|sco|redhat|red hat|red hat enterprise|suse|fedora |centos|cent os|mint|ubuntu|solaris|sun|raspbian'"
  eval $cmd
fi

# print info for CPU(s)
if [ "Linux" == $OS ] || [ "CYGWIN_NT-6.1-WOW" == $OS ] || [ "Alpine" == $OS ]; then
   # for intel
   cores=`cat /proc/cpuinfo  | grep "core id" | sort -u | wc -l`
   cpus=`cat /proc/cpuinfo  | egrep 'physical id' | sort -u| wc -l`
   cputype=`cat /proc/cpuinfo  | grep 'model name' | sed 's/.*://'| head -1`
   # for ARM
   if [ "$cpus" -lt 1 ];then
         cpus=1
         cores=`cat /proc/cpuinfo  | egrep 'processor' | sort -u| wc -l`
   fi
else
   cputype=`kstat cpu_info | grep brand | head -1 | sed 's/.*brand  *//'`
   cpus=`kstat | grep -i cpus | head -1 | awk '{print $2}'`
   totcores=`kstat | grep -i ncpus | tail -1 | awk '{print $2}'`
   cores=`echo "$totcores / $cpus" | bc`
fi

totcores=$(($cpus*$cores))

echo
echo $cputype
echo "COREs = $cores/CPU, $totcores total"
echo " CPUs = $cpus"
echo

# print out CPU usage and memory usage
if [[ $OS == CYGWIN* ]]; then
      free
else
      top -n 1 | head -5 | tail -4
fi
# print out networking
if [ "Linux" == $OS ]; then
   echo
   ifconfig | grep "addr:[0-9]|inet [0-9]" | sed 's/  //g'
elif [[ $OS == CYGWIN* ]]; then
      ipconfig | grep -i address
else
   ifconfig -a | grep inet | sed 's/  //g'
fi

echo ""

# print out any installed product info
if [ "Linux" == $OS ]; then
   echo "------------------------------------------------------------"
   $pkglist | grep $GREPOPTS 'yad'
   echo
elif [ "Alpine" == $OS ]; then
   apk info
   echo
fi

# print current login account
if [ -e /usr/bin/whoami ]; then
     whoami
else
     who am i
fi

echo "======================================================================"
echo ""

# print recent logins
if [[ $OS == CYGWIN* ]]; then
     echo
else
     if [ -e /usr/bin/last ]; then
          last | head -5
          echo
     fi
fi

if [ -e /usr/bin/docker ]; then
     echo "------------------------------------------------------------"
     sudo docker ps | eval "$colorout  healthy green  unheathy bright_red tcp cyan udp magenta days blue ago blue hours green alpine green"
else
     if [[ $docker > 0 ]]; then
        echo "------------------------------------------------------------"
        echo "This is a docker container!" | eval "$colorout  docker cyan"
        echo
        ps -ef
     fi
fi

# display raspberry pi logo
if [ -e /etc/rpi-issue ]; then
     echo "------------------------------------------------------------"
     if [ -e /usr/bin/linuxlogo ]; then
             /usr/bin/linuxlogo
     else
            cat /etc/rpi-issue
     fi
fi

echo

# That's all folks!
